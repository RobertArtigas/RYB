#!---------------------------------------------------------------------
#!--------------------------------------------------------------------
#!--------------------------------------------------------------------
#!--------------------------------------------------------------------
#GROUP(%NO20220426)
#!
#!
#! #utility(FileStructure,'2010.01.07 - Get File Structure')
#! #declare(%ValueConstruct)
#! #declare(%TXDFile)
#! #set(%TXDFile,'Composite_File_Structure.TXD')
#! #create(%TXDFile)
#! [DICTIONARY]
#!
#! [FILES]
#! #for(%File)
#! %FileStruct
#!   #for(%Key)
#! %KeyStruct
#!   #endfor
#!   #for(%Field),where(upper(%FieldType) = 'MEMO' or upper(%FieldType) = 'BLOB')
#! %FieldStruct
#!   #endfor
#! %FileStructRec
#!   #for(%Field),where(upper(%FieldType) <> 'MEMO' AND upper(%FieldType) <> 'BLOB')
#! %FieldStruct
#!   #endfor
#! %FileStructRecEnd
#! %FileStructEnd
#! #endfor
#! #close(%TXDFile)
#! #run('notepad.exe ' & %TXDFile)
#!
#!
#!UTILITY (RYB_GroupStructure, 'Generate Record Groups'), WIZARD
#!--------------------------------------------------------------------
#! Created By:  Roberto Artigas Jr
#! Created:     1999.01.31 - Roberto Artigas y Soler
#! Author:      Copyright © 1999-2999 by Roberto Artigas y Soler
#!              All rights reserved world wide.
#! Changes:
#! 2022.05.06.FRI:  Roberto Artigas y Soler
#!    *   Options for this template use REFVAR keword as listeral.
#! 2021.11.26.FRI:  Roberto Artigas y Soler
#!    *   Changed 'group_' to 'grpfld_' for default prefix.
#! 2021.11.21.SUN:  Roberto Artigas y Soler
#!    *   Added field position and field description as comments.
#!        Added documentation to https://github.com/RobertArtigas/RYB/wiki/Generate-Groups-and-Fields
#! 2021.11.20.SAT:  Roberto Artigas y Soler
#!    *   Lots of changes to get field extended name attributes added.
#!        Copied #GROUPS from DCT2SQL and modified this template to get field position in the extended property.
#!        Tied in the extended properties and added COLUMN('...') so editing labels are available. 
#! 2021.03.19:      Roberto Artigas y Soler
#!    *   Changed the ITEMIZE to simple numerical equates. Number showing on line.  
#!
#INSERT(%PrepareFilesGRPREC)
#!
#SHEET
  #TAB ('Generate Records Groups')
    #DISPLAY ('This wizard will generate group definitions of the contents of your current dictionary.'), AT(90, 8, 235, 24)
    #DISPLAY ('To specify how you want the report constructed, click on the Next button.'), AT(90)
  #ENDTAB
  #TAB ('Dictionary Print Wizard - Reported Files'), FINISH(1)
    #DISPLAY ('You can report on each file in your dictionary, or you can select individual files to report on.'), AT(90, 8, 235, 24)
    #PROMPT ('Report on all files in my dictionary.', CHECK), %ReportUseAllFilesGRPREC, DEFAULT(1), AT(90,, 180)
  #ENDTAB
  #TAB ('Dictionary Print Wizard - Select Reported Files'), WHERE(~%ReportUseAllFilesGRPREC), FINISH(1)
    #!PROMPT ('File Selection', FROM (%File)), %ReportFileSelectionGRPREC, INLINE, SELECTION('File Selection'), AT(90, 8, 235)
    #PROMPT ('File Selection', FROM(%SelectFromFilesGRPREC)), %ReportFileSelectionGRPREC, INLINE, SELECTION('File Selection'), AT(90, 8, 235)
  #ENDTAB
  #TAB ('Dictionary Print Wizard - Finally...')
    #DISPLAY ('This concludes the dictionary Group Generate wizard.'), AT(90, 8, 235, 24)
    #DISPLAY ('Click on the Finish button to generate Groups.'), AT(90, 82, 235, 24)
  #ENDTAB
#ENDSHEET
#!
#DECLARE(%BegDate)
#DECLARE(%BegTime)
#SET(%BegDate, TODAY())                   #! Begin date
#SET(%BegTime, CLOCK())                   #! Begin time
#!
#DECLARE(%zNames)
#DECLARE(%zGroup)
#DECLARE(%zItems)
#SET(%zNames, 40)
#SET(%zGroup, %zNames + 0)
#SET(%zItems, %zGroup + 2)
#!
#DECLARE(%LineWork)
#DECLARE(%LineNext)
#DECLARE(%LineText)
#DECLARE(%CountEquate)
#!
#COMMENT(180)
#DECLARE (%ReportedFilesGRPREC),MULTI,UNIQUE
#DECLARE (%Groups),MULTI
#DECLARE (%ValueConstruct)
#DECLARE (%TheKeyId)
#DECLARE (%TheKeyNo,LONG)
#!
#IF (%ReportUseAllFilesGRPREC)
  #! #FOR (%File)
  #!   #ADD (%ReportedFilesGRPREC, %File)
  #! #ENDFOR
  #FOR (%SelectFromFilesGRPREC)
    #ADD (%ReportedFilesGRPREC, %SelectFromFilesGRPREC)
  #ENDFOR
#ELSE
  #FOR (%ReportFileSelectionGRPREC)
    #ADD (%ReportedFilesGRPREC, %ReportFileSelectionGRPREC)
  #ENDFOR
#ENDIF
#!
#DECLARE (%OutputFile)
#FOR (%ReportedFilesGRPREC)
  #FIX (%File, %ReportedFilesGRPREC)
  #SET (%OutputFile, %FILE & '.inc')
  #MESSAGE('File Group Definition: ' & %OutputFile, 2)
  #CREATE (%OutputFile)
#INSERT(%GiveMeSomeStuffGRPREC)
#INSERT(%GiveMeSomeStuffGRPREC)
  #CLOSE (%OutputFile)
#ENDFOR
#!---------------------------------------------------------------------
#!---------------------------------------------------------------------
#!---------------------------------------------------------------------
#GROUP(%PrepareFilesGRPREC)
#PREPARE
#DECLARE(%SelectFromFilesGRPREC),MULTI,UNIQUE
#FOR (%File)
  #!----------------------------------!
  #! Ignore certain file DRIVER types !
  #!----------------------------------!
  #CASE(%FileDriver)
    #OF('ASCII')
  #OROF('BASIC')
  #OROF('DOS')
  #OROF('MEMORY')                                                               #! RA.2018.04.12 - Ignored
      #CYCLE
  #ENDCASE
  #!---------------------------!
  #! Ignore certain FILE types !
  #!---------------------------!
  #CASE(%FileType)
  #OF  ('VIEW')
  #OROF('ALIAS')
      #CYCLE
  #ENDCASE
  #!-------------------------------------!
  #! Ignore FILES with NO FIELDS in them !
  #!-------------------------------------!
  #IF(NOT ITEMS(%Field))                                                        #! RA.2001.12.01
    #CYCLE                                                                      #! RA.2001.12.01
  #ENDIF                                                                        #! RA.2001.12.01
  #!
  #IF(NOT VAREXISTS(%nLoc1))
    #DECLARE(%nLoc1)
  #ENDIF
  #IF(NOT VAREXISTS(%nLoc2))
    #DECLARE(%nLoc2)
  #ENDIF
  #IF(NOT VAREXISTS(%NFileUser))
    #DECLARE(%NFileUser)
  #ENDIF
  #IF(NOT VAREXISTS(%NFileOpt1))
    #DECLARE(%NFileOpt1)
  #ENDIF
  #IF(NOT VAREXISTS(%NFileOpt2))
    #DECLARE(%NFileOpt2)
  #ENDIF
  #IF(NOT VAREXISTS(%NFileOpt3))
    #DECLARE(%NFileOpt3)
  #ENDIF
  #IF(NOT VAREXISTS(%NFileOpt4))
    #DECLARE(%NFileOpt4)
  #ENDIF
  #!
  #SET(%nLoc1,INSTRING('REFVAR(',%FileUserOptions,1,1))
  #SET(%nLoc2,INSTRING(')',%FileUserOptions,1,%nLoc1))
  #SET(%NFileUser,UPPER(SUB(%FileUserOptions,%nLoc1,%nLoc2)))
  #!SET(%NFileUser,UPPER(EXTRACT(%FileUserOptions,'REFVAR')))
  #SET(%NFileOpt1,EXTRACT(%NFileUser,'REFVAR',1))
  #SET(%NFileOpt2,EXTRACT(%NFileUser,'REFVAR',2))
  #SET(%NFileOpt3,EXTRACT(%NFileUser,'REFVAR',3))
  #SET(%NFileOpt4,EXTRACT(%NFileUser,'REFVAR',4))
  #!
  #IF(SUB(%NFileOpt1,1,1)='N')                                                  #! Ignore this file
    #CYCLE
  #ENDIF
  #!
  #ADD (%SelectFromFilesGRPREC, %File)
#ENDFOR
#ENDPREPARE
#GROUP(%PrepareFilesEndGRPREC)
#!---------------------------------------------------------------------
#!---------------------------------------------------------------------
#!---------------------------------------------------------------------
#GROUP(%CopyrightGRPREC)
#PREPARE
  #IF(NOT VAREXISTS(%CopyrightGRPREC01))
    #DECLARE(%CopyrightGRPREC01)
  #ENDIF
  #SET(%CopyrightGRPREC01, 'Generate GROUPS with extended FIELD names for this dictionary.')
  #SET(%CopyrightGRPREC01, %CopyrightGRPREC01 & '<13,10>Copyright © 1999-' & YEAR(TODAY()) & ' by Roberto Artigas y Soler.')
  #SET(%CopyrightGRPREC01, %CopyrightGRPREC01 & '<13,10>All copyrights reserved world wide.')
  #SET(%CopyrightGRPREC01, %CopyrightGRPREC01 & '<13,10>E-MAIL: roberto.artigas.dev@gmail.com')
#ENDPREPARE
#!BOXED('Version 1.0 [ 2018.09.11 ]'),AT(,,278),PROP(PROP:FontStyle,700)
#BOXED('Version '& %tplVersionGRPREC & ' [ ' & %tplReleaseGRPREC & ' ]'),AT(,,454),PROP(PROP:FontStyle,700) 
  #DISPLAY(''),AT(,,,1)
  #DISPLAY(%CopyrightGRPREC01),AT(,,436,34)
#ENDBOXED
#!
#GROUP(%MITLicenseGRPREC)
#TAB('GRPREC'),PROP(PROP:FontStyle,700)
  #INSERT(%CopyrightGRPREC) 
  #INSERT(%MITLicense)
  #INSERT(%ClarionFamily)
#ENDTAB
#!
#GROUP(%ExplainGRPREC)
#PREPARE
  #IF(NOT VAREXISTS(%ExplainGRPREC01))
    #DECLARE(%ExplainGRPREC01)
  #ENDIF
  #SET(%ExplainGRPREC01, '')
  #SET(%ExplainGRPREC01, %ExplainGRPREC01 & 'This template is used to make an include file defining a GROUP for')
  #SET(%ExplainGRPREC01, %ExplainGRPREC01 & ' each table in your dictionary with field extended names. You might want to include this extension')
  #SET(%ExplainGRPREC01, %ExplainGRPREC01 & ' on one application only. Preferably in your DATA application.')
  #SET(%ExplainGRPREC01, %ExplainGRPREC01 & '<13,10><13,10>')
  #SET(%ExplainGRPREC01, %ExplainGRPREC01 & 'These field extended name attributes will allow to create generic programming code when appropriate.')
  #SET(%ExplainGRPREC01, %ExplainGRPREC01 & ' This is posible since some of the dictionary attributes are available at program run time.')
  #SET(%ExplainGRPREC01, %ExplainGRPREC01 & '<13,10><13,10>')
  #SET(%ExplainGRPREC01, %ExplainGRPREC01 & 'You can select the tables that you just need or can select all the tables by choice.')
  #SET(%ExplainGRPREC01, %ExplainGRPREC01 & ' It will not allow you to default all the tables since this can generate a lot of files.')
  #SET(%ExplainGRPREC01, %ExplainGRPREC01 & '<13,10><13,10>')
  #SET(%ExplainGRPREC01, %ExplainGRPREC01 & 'This template has been tested with the ABC template chains.')
  #SET(%ExplainGRPREC01, %ExplainGRPREC01 & '')
  #!
  #IF(NOT VAREXISTS(%ExplainGRPREC02))
    #DECLARE(%ExplainGRPREC02)
  #ENDIF
  #!
  #SET(%ExplainGRPREC02, '')
  #SET(%ExplainGRPREC02, %ExplainGRPREC02 & 'NOTE: Make sure the COMPLETE DIRECTORY PATH exists on your machine.')
#ENDPREPARE
#!
#GROUP(%TabSelectionGRPREC)
#TAB('Selection')  #!,PROP(PROP:FontStyle,700),PROP(PROP:FontColor,0C79A3H)
  #BOXED(''),AT(,,454),PROP(PROP:FontStyle,700)
    #!DISPLAY(''),AT(,,,1)
    #!PROMPT ('Generate all files in my dictionary. (Cannot change this option)', CHECK), %ReportUseAllFilesGRPREC, DEFAULT(0), AT(10) #!, PROP(PROP:READONLY,1), PROP(PROP:FontStyle,700), PROP(PROP:FontColor,0C79A3H)
    #PROMPT ('Generate all files in my dictionary.', CHECK), %ReportUseAllFilesGRPREC, DEFAULT(0), AT(10)
    #DISPLAY(''),AT(,,,1)
    #ENABLE(~%ReportUseAllFilesGRPREC)
      #PROMPT ('File Selection', FROM(%SelectFromFilesGRPREC)), %ReportFileSelectionGRPREC, INLINE, SELECTION('File Selection'), AT(,,,198)
    #ENDENABLE
  #ENDBOXED
#ENDTAB
#!-----------------------------------------------------------------------------
#!-----------------------------------------------------------------------------
#!-----------------------------------------------------------------------------
#GROUP(%GiveMeSomeStuffGRPREC)
!BOF
!
!Region Generate
!
! Dictionary:   %DictionaryFile
! File:         %OutputFile
! Date-Time:    %@D010@(%BegDate) - %@T06@(%BegTime)
! Purpose:      Generated File Records as Groups
! Author:       GenerateGroups Template
! Narative:     This template is used to pass records structures
!               back and forth between DLL's when the files
!               are not shared. Since file definitions are not
!               available, data has to be passed in areas.
!
!EndRegion
!Region Header
  #IF (%FileType = 'ALIAS')
! Name:         %File (An alias for %AliasFile)
  #ELSE
! Name:         %File
  #ENDIF
! Prefix:       %FilePrefix
  #IF (%FileDescription)
! Description:  %FileDescription
  #ENDIF
  #IF (%FileName)
! Filename:     %FileName
  #ENDIF
!EndRegion
  #IF(ITEMS(%Key))
!Region KeyDocs
!
!-Keys Docs-
!
  #SUSPEND
    #FOR (%Key)
      #IF(%KeyIndex <> 'KEY')
        #CYCLE
      #ENDIF
      #IF(~ITEMS(%KeyField))
        #CYCLE
      #ENDIF
! %[%zNames-1]KeyID %|
      #FOR (%KeyField)
        #FIX (%Field, %KeyField)
        #IF (INSTANCE(%KeyField) = 1)
%FieldID(%KeyFieldSequence)
        #ELSE
!%[%zGroup+1]Null%FieldID(%KeyFieldSequence)
        #ENDIF
      #ENDFOR
    #ENDFOR
  #RESUME
!EndRegion
!Region KeyDefinitions
!
!-Keys-
!
  #SUSPEND
    #SET(%TheKeyNo,1)
    #FOR (%Key)
      #SET(%zFldFrom,0)     #! RA.2021.11.20.SAT: Added
      #IF(%KeyIndex <> 'KEY')
        #CYCLE
      #ENDIF
      #IF(~ITEMS(%KeyField))
        #CYCLE
      #ENDIF
      #FOR (%KeyField)
        #FIX (%Field, %KeyField)
        #CALL(%BuildFieldTypeGRPREC,%zFldType)
        #CALL(%BuildAttributesFieldNameGRPREC,%zTheName)
        #IF (INSTANCE(%KeyField) = 1)
          #!SET(%TheKeyId,SUB(%KeyID,1,INSTRING('_',%KeyID,1,1)-1))
          #SET(%TheKeyId, 'Key' & FORMAT(%TheKeyNo,@N02))
          #SET(%LineWork, UPPER(%FilePrefix) & '_tKey_' & %KeyID & '')
          #SET(%LineNext, 'GROUP,TYPE,BINDABLE,PRE(k' & UPPER(%FilePrefix) & '_' & %TheKeyId & ')')
%[%zNames]LineWork %[%zGroup-%zNames]NULL %LineNext
#!%FilePrefix:tKey:%KeyID GROUP,TYPE,BINDABLE,PRE(t%FilePrefix:%TheKeyId)
#!%FieldStruct #<! %FieldDescription
#!%[%zNames]FieldID %[%zItems-%zNames]NULL %FieldStatement #<! %FieldDescription
#!%[%zNames]FieldID %[%zItems-%zNames]NULL %FieldStatement%zTheName
#!%[%zNames]FieldID %[%zItems-%zNames]NULL %FieldStatement%zTheName #<! %zFldRange %FieldDescription
%[%zNames]FieldID %[%zItems-%zNames]NULL %zFldType%zTheName #<! %zFldRange %FieldDescription
          #SET(%TheKeyNo, %TheKeyNo + 1)
        #ELSE
#!%FieldStruct #<! %FieldDescription
#!%[%zNames]FieldID %[%zItems-%zNames]NULL %FieldStatement #<! %FieldDescription
#!%[%zNames]FieldID %[%zItems-%zNames]NULL %FieldStatement%zTheName
#!%[%zNames]FieldID %[%zItems-%zNames]NULL %FieldStatement%zTheName #<! %zFldRange %FieldDescription
%[%zNames]FieldID %[%zItems-%zNames]NULL %zFldType%zTheName #<! %zFldRange %FieldDescription
        #ENDIF
      #ENDFOR
#!  END
%[%zNames]NULL %[%zGroup-%zNames]NULL END 
    #ENDFOR
  #RESUME
!EndRegion
  #ENDIF
!Region RecordDefinition
!
!-Record-
!
#!   #SUSPEND
#!   #SET(%LineWork, UPPER(%FilePrefix) & '_tRec')
#!   #SET(%LineNext, 'GROUP,TYPE,BINDABLE,PRE(r' & UPPER(%FilePrefix) & ')')
#! #!%FilePrefix:mRec GROUP,TYPE,BINDABLE,PRE(m%FilePrefix)
#! %[%zNames]LineWork %[%zGroup-%zNames]NULL %LineNext
#!     #SET(%zFldFrom,0)     #! RA.2021.11.20.SAT: Added
#!     #FOR(%Field)
#!       #CASE(UPPER(%FieldType))
#!       #OF  ('BLOB')
#!       #OROF('MEMO')
#!       #!OROF('GROUP')
#!       #!OROF('END')
#!         #CYCLE
#!       #ENDCASE
#!       #CALL(%BuildFieldTypeGRPREC,%zFldType)
#!       #CALL(%BuildAttributesFieldNameGRPREC,%zTheName)
#! #! ! %FieldStruct%zTheName
#! #! %[%zNames]FieldID %[%zItems-%zNames]NULL %FieldStatement #<! %FieldDescription
#! #!%[%zNames]FieldID %[%zItems-%zNames]NULL %FieldStatement%zTheName #<! %zFldRange %FieldDescription
#! %[%zNames]FieldID %[%zItems-%zNames]NULL %zFldType%zTheName #<! %zFldRange %FieldDescription
#!     #ENDFOR
#! %[%zNames]NULL %[%zGroup-%zNames]NULL END
#!   #!RESUME
  #SUSPEND
#!
#!%FileStructRec
  #SET(%LineWork, UPPER(%FilePrefix) & '_tRec')
  #SET(%LineNext, 'GROUP,TYPE,BINDABLE,PRE(r' & UPPER(%FilePrefix) & ')')
%[%zNames]LineWork %[%zGroup-%zNames]NULL %LineNext
    #SET(%zFldFrom,0)
    #SET(%zFldTo  ,0)
    #SET(%zGroups ,0)
    #FOR(%Field),WHERE(UPPER(%FieldType) <> 'MEMO' AND UPPER(%FieldType) <> 'BLOB')
      #CALL(%BuildFieldTypeGRPREC,%zFldType)
      #CALL(%BuildAttributesFieldNameGRPREC,%zTheName)
      #CALL(%BuildFldStmtGRPREC,%zFldStmt)
#! %FieldStruct || %FieldStatement || %%zFldStmt = %zFldStmt || %%zFldType = %zFldType
      #!IF(UPPER(%FieldType)='END')
      #IF(%zFldType='END')
        #SET(%zGroups,%zGroups-1)
      #ENDIF
      #! RA.2022.05.01.SUN: Double check for 'unusual' attributes and fix logic [???]
      #! RA.2022.04.27.WED: 'END' -> No name, no name attributes
      #!IF(UPPER(%FieldType)<>'END')
      #IF(%zFldType<>'END')
        #SET(%nLoc1, INSTRING(',',%zFldStmt,1,1))
#! %%nLoc1 = %nLoc1 || %%zFldStmt = %zFldStmt
        #IF(%nLoc1)
          #! RA.2022.05.01.SUN: You will get to this piece when you have dimensions and/or over fields
          #! The TYPE field will be the first one. Then come the DIM and OVER keywords.
          #SET(%zFldStmt,SUB(%zFldStmt,%nLoc1+0,LEN(%nLoc1)-%nLoc1+0))
%[%zNames]FieldID %[%zItems-%zNames + (%zGroups*2)]NULL %zFldType%zFldStmt%zTheName #<! %zFldRange %FieldDescription
        #ELSE
%[%zNames]FieldID %[%zItems-%zNames + (%zGroups*2)]NULL %zFldType%zTheName #<! %zFldRange %FieldDescription
       #ENDIF
      #ELSE
%[%zNames]FieldID %[%zItems-%zNames + (%zGroups*2)]NULL %zFldType #<! %zFldRange %FieldDescription
      #ENDIF
      #!IF(UPPER(%FieldType)='GROUP')
      #IF(%zFldType='GROUP')
        #SET(%zGroups,%zGroups+1)
      #ENDIF
    #ENDFOR
%[%zNames]NULL %[%zGroup-%zNames]NULL END
#!%FileStructRecEnd
#!
  #RESUME
!EndRegion
!Region QueueDefinition
!
!-Queue-
!
  #SUSPEND
#SET(%LineWork, UPPER(%FilePrefix) & '_qRec')
#SET(%LineNext, 'QUEUE(' & UPPER(%FilePrefix) & '_tRec' & '),TYPE,BINDABLE,PRE(q' & UPPER(%FilePrefix) & ')')
%[%zNames]LineWork %[%zGroup-%zNames]NULL %LineNext
%[%zNames]NULL %[%zGroup-%zNames]NULL END
  #RESUME
!EndRegion
!Region FieldEquates
!
!-Equates-
!
  #SUSPEND
#!!! %[%zNames]NULL %[%zGroup-%zNames]NULL ITEMIZE(1)
    #SET(%CountEquate, 0)
    #FOR (%Field)
      #CASE(%FieldType)
      #OF  ('BLOB')
      #OROF('MEMO')
      #OROF('GROUP')
      #OROF('END')
        #CYCLE
      #ENDCASE
      #SET(%CountEquate, %CountEquate + 1)
#SET(%LineWork, 'C_' & UPPER(%FilePrefix) & '_' & UPPER(%FieldID))
#SET(%LineNext, 'EQUATE(' & %CountEquate & ')')
%[%zNames]LineWork %[%zItems-%zNames]NULL %LineNext
    #ENDFOR
#!!! %[%zNames]NULL %[%zGroup-%zNames]NULL END
  #RESUME
!
!EndRegion
#CALL(%GiveMeSomeStuffLISTBOX, %FALSE)
!
!EOF
#GROUP(%GiveMeSomeStuffEndGRPREC)
#!---------------------------------------------------------------------
#!---------------------------------------------------------------------
#!---------------------------------------------------------------------
#EXTENSION(RYB_GroupStructure,'RA.2010.01.07: Group Structures with extended field names'),Description('RYB | Generate group structures with extended field names in include files. Version: ' & %tplVersionGRPREC & ', Release: ' & %tplReleaseGRPREC),APPLICATION
#!-----------------------------------------------------------------------------
#INSERT(%PreambleRYB)
#!-----------------------------------------------------------------------------
#! Created By:          Roberto Artigas y Soler
#! Author:              2021.11.20 - Roberto Artigas y Soler
#! Changes:
#! 2022.05.19.THU:  Roberto Artigas y Soler
#!    *   #CALL(%GiveMeSomeStuffLISTBOX, %FALSE) in another template to generate list box definitions.
#! 2021.11.26.FRI:  Roberto Artigas y Soler
#!    *   Changed 'group_' to 'grpfld_' for default prefix.
#! 2021.11.21.SUN:  Roberto Artigas y Soler
#!    *   Added field position and field description as comments.
#!        Added documentation to https://github.com/RobertArtigas/RYB/wiki/Generate-Groups-and-Fields
#! 2021.11.20.SAT:  Roberto Artigas y Soler
#!    *   Lots of changes to get field extended name attributes added.
#!        Copied #GROUPS from DCT2SQL and modified this template to get field position in the extended property.
#!        Tied in the extended properties and added COLUMN('...') so editing labels are available. 
#!-----------------------------------------------------------------------------
#PREPARE
#ENDPREPARE
#!
#SHEET,AT(,,464),HSCROLL
#TAB('Hidden'),WHERE(0=1)
#INSERT(%PrepareFilesGRPREC)
#ENDTAB
#INSERT(%MITLicenseGRPREC)
#INSERT(%ExplainGRPREC)
#TAB(UPPER(%Application) & '.' & UPPER(%ProgramExtension))
  #BOXED('Record GROUPS-FIELDS Generator'),AT(,,456),PROP(PROP:FontStyle,700),PROP(PROP:FontColor,0C79A3H)
    #DISPLAY(''),AT(,,,1)
    #DISPLAY(%ExplainGRPREC02),AT(,,436,10),PROP(PROP:FontStyle,700) 
    #BOXED(''),AT(,,446)
      #PROMPT('Directory: ',@S120)  ,%IncludeDirectoryGRPREC  , REQ, DEFAULT('.\Include\')        ,AT(70,,376)
      #PROMPT('Prefix: ',@S120)     ,%SourcePrefixGRPREC      , REQ, DEFAULT('grprec_')           ,AT(70,,376)
      #!PROMPT('Include: '  ,@S120),%IncludeFilename , REQ, DEFAULT('_' & %ProgramExtension & '_' & UPPER(SLICE(%Program, 1, INSTRING('.', %Program, 1, 1)-1)) & '.GRP') ,AT(70,,376)
      #PREPARE
      #SET(%IncludeLocationGRPREC,%IncludeDirectoryGRPREC & '') #!%IncludeFilename )
      #ENDPREPARE
      #PROMPT('Location: ' ,@S120),%IncludeLocationGRPREC , REQ, DEFAULT(%IncludeLocationGRPREC),PROP(PROP:READONLY,1),PROP(PROP:FontStyle,700),PROP(PROP:FontColor,0C79A3H)        ,AT(70,,376)
    #ENDBOXED
    #DISPLAY(''),AT(,,,1)
    #DISPLAY(%ExplainGRPREC01),AT(,,436,154)
  #ENDBOXED
#ENDTAB
#INSERT(%TabSelectionGRPREC)
#ENDSHEET
#!-----------------------------------------------------------------------------
#!-----------------------------------------------------------------------------
#!-----------------------------------------------------------------------------
#ATSTART
#!
#DECLARE(%BegDate)
#DECLARE(%BegTime)
#SET(%BegDate, TODAY())                   #! Begin date
#SET(%BegTime, CLOCK())                   #! Begin time
#!
#DECLARE(%zNames)
#DECLARE(%zGroup)
#DECLARE(%zItems)
#SET(%zNames, 40)
#SET(%zGroup, %zNames + 0)
#SET(%zItems, %zGroup + 2)
#!
#DECLARE(%LineWork)
#DECLARE(%LineNext)
#DECLARE(%LineText)
#DECLARE(%CountEquate)
#!
#DECLARE (%ReportedFilesGRPREC),MULTI,UNIQUE
#DECLARE (%Groups),MULTI
#DECLARE (%ValueConstruct)
#DECLARE (%TheKeyId)
#DECLARE (%TheKeyNo,LONG)
#!                                        #! RA.2021.11.20.SAT: Added
#DECLARE(%zTheName)
#DECLARE(%zFldType)
#DECLARE(%zFldRange)
#DECLARE(%zFldSize)
#DECLARE(%zFldFrom)
#DECLARE(%zFldTo)
#SET(%zFldFrom, 0)
#SET(%zFldTo  , 0)
#!                                        #! RA.2022.04.30.SAT: Added
#DECLARE(%zA,LONG)
#DECLARE(%zB,LONG)
#DECLARE(%zFldStmt)
#DECLARE(%zGroups)
#!                                        #! RA.2022.05.01.SUN: Added
#IF(NOT VAREXISTS(%nLoc1))
  #DECLARE(%nLoc1)
#ENDIF
#IF(NOT VAREXISTS(%nLoc2))
  #DECLARE(%nLoc2)
#ENDIF
#IF(NOT VAREXISTS(%NFieldUser))           #! Field user options [REFVAR(,,,)]
  #DECLARE(%NFieldUser)`
#ENDIF
#IF(NOT VAREXISTS(%NFieldOpt1))           #! Field option 1 [NO]                  #! Ignore this field
  #DECLARE(%NFieldOpt1)
#ENDIF
#IF(NOT VAREXISTS(%NFieldOpt2))           #! Field option 2 [<FieldType>]         #! Dictionary type override 
  #DECLARE(%NFieldOpt2)
#ENDIF
#IF(NOT VAREXISTS(%NFieldOpt3))           #! Field option 3 [<Default>]           #! Dictionary default override
  #DECLARE(%NFieldOpt3)
#ENDIF
#IF(NOT VAREXISTS(%NFieldOpt4))           #! Field option 4 [Not used yet]        #! Not used yet
  #DECLARE(%NFieldOpt4)
#ENDIF
#!
#IF (%ReportUseAllFilesGRPREC)
  #FOR (%SelectFromFilesGRPREC)
    #ADD (%ReportedFilesGRPREC, %SelectFromFilesGRPREC)
  #ENDFOR
#ELSE
  #FOR (%ReportFileSelectionGRPREC)
    #ADD (%ReportedFilesGRPREC, %ReportFileSelectionGRPREC)
  #ENDFOR
#ENDIF
#!
#COMMENT(180)
#!
#IF(NOT VAREXISTS(%OutputFile))
  #DECLARE(%OutputFile)
#ENDIF
#!
#FOR (%ReportedFilesGRPREC)
  #FIX (%File, %ReportedFilesGRPREC)
  #!SET (%OutputFile, %IncludeDirectoryGRPREC & %FILE & '.inc')
  #SET (%OutputFile, %IncludeDirectoryGRPREC & %SourcePrefixGRPREC & %FILE & '.inc')
  #MESSAGE('File Group Definition: ' & %OutputFile, 2)
  #!ERROR('File Group Definition: ' & %OutputFile)
  #CREATE (%OutputFile)
#INSERT(%GiveMeSomeStuffGRPREC)
  #CLOSE (%OutputFile)
#ENDFOR
#!
#ENDAT
#!-----------------------------------------------------------------------------
#!-----------------------------------------------------------------------------
#! RA.2019.11.21: This has to be inside a field loop for all fields to get something.
#! This will give you an alternative if there is nothing added to the external name attributes.
#! Results can be also used to replace the name external attributes in the dictionary.
#! Used as comments in a few places where I generate structures from the dictionary. 
#GROUP(%BuildFieldTypeGRPREC,*%pTheField)                                             #! RA.2019.11.29: Added
#IF(NOT VAREXISTS(%TheFieldType))
  #DECLARE(%TheFieldType)
#ENDIF
#!
#CASE(UPPER(%FieldType))
#OF  ('DECIMAL')
#OROF('PDECIMAL')
  #SET(%pTheField , %FieldType & '(' & %FieldMemoSize & ',' & %FieldPlaces & ')')
#OF  ('STRING')
#OROF('MEMO')
#OROF('BLOB')
#OROF('CSTRING')
#OROF('PSTRING')
#OROF('USTRING')
  #SET(%pTheField , %FieldType & '(' & %FieldMemoSize & ')')
#ELSE
  #SET(%pTheField , %FieldType)
#ENDCASE
#! RA.2022.05.01: Let's see about reference type field override
#INSERT(%GetFieldOptions)                                                             #! REFVAR(,,,) for Fields
#IF((SUB(%NFieldOpt1,1,1) <> 'N') AND (%NFieldOpt2 <> ''))
  #SET(%pTheField,%NFieldOpt2)
#ENDIF
#!
#SET(%pTheField, UPPER(%pTheField))
#!-----------------------------------------------------------------------------
#!-----------------------------------------------------------------------------
#GROUP(%BuildAttributesFieldNameGRPREC,*%pTheName)                                    #! RA.2019.11.21: Added
#IF(NOT VAREXISTS(%TheName))
  #DECLARE(%TheName)
#ENDIF
#IF(NOT VAREXISTS(%TheFieldType))
  #DECLARE(%TheFieldType)
#ENDIF
#IF(NOT VAREXISTS(%TheFieldName))
  #DECLARE(%TheFieldName)
#ENDIF
#! RA.2022.04.10: Remove sorounding spaces on both sides of the vertical bar 
  #SET(%TheName     , '')
  #SET(%TheName     , %TheName & ',NAME(<39>')
  #CASE(UPPER(%FieldID))
  #OF  ('TIMESTAMP')
    #SET(%TheName   , %TheName & 'ts')
  #OF  ('SERVERTIMESTAMP')
    #SET(%TheName   , %TheName & 'sts')
  #OF  ('DELETETIMESTAMP')
  #OROF('DELETEDTIMESTAMP')
    #SET(%TheName   , %TheName & 'dts')
  #ELSE
    #SET(%TheName   , %TheName & %FieldID)
  #ENDCASE
#!
  #!CASE(UPPER(%FieldType))
  #!OF  ('DECIMAL')
  #!OROF('PDECIMAL')
    #!SET(%TheFieldType , %FieldType & '(' & %FieldMemoSize & ',' & %FieldPlaces & ')')
  #!OF  ('STRING')
  #!OROF('MEMO')
  #!OROF('BLOB')
  #!OROF('CSTRING')
  #!OROF('PSTRING')
  #!OROF('USTRING')
    #!SET(%TheFieldType , %FieldType & '(' & %FieldMemoSize & ')')
  #!ELSE
    #!SET(%TheFieldType , %FieldType)
  #!ENDCASE
  #CALL(%BuildFieldTypeGRPREC,%TheFieldType)
  #SET(%TheName     , %TheName & '|' & %TheFieldType)
#!
  #SET(%TheName     , %TheName & '|' & UPPER(%FieldDisplayPicture))
#!
#! RA.2022.04.27.WED: ',OVER(' might need a rethink or not [???]
#! RA.2021.11.20.SAT: Calculate the field length range
  #IF (NOT INSTRING(',OVER(',%FieldStatement,1,1))
    #CALL(%CalculatePositionGRPREC,%zFldFrom,%zFldTo,%zFldSize,%FieldType,%FieldMemoSize)
  #ELSE
    #SET(%zFldFrom, %zFldTo)
  #ENDIF
  #SET(%zFldRange   , '[' & FORMAT(%zFldFrom,@N04) & '-' & FORMAT((%zFldTo),@N04) & ']')
  #SET(%zFldFrom  , %zFldTo + 1)
#!
  #SET(%TheName     , %TheName & '|' & %zFldRange)
#!
#!  #SET(%TheName   , %TheName & '|' & EXTRACT(%FieldQuickOptions,'TAB'))
#!
#! RA.2021.04.10: Remove the ALT-& marker from text. Add back if needed.
#! RA.2020.05.06: Checkboxes do not have a PROMPT. So fake a prompt to allow for editing.
#! RA.2020.02.05: Add the field display prompt that way we can set the field edit prompt.
  #FOR(%FieldScreenControl)
    #IF(INSTRING('CHECK(',%FieldScreenControl,1,1) > 0)                 #! RA.2020.05.06: Added for checkboxes
      #SET(%TheFieldName, EXTRACT(%FieldScreenControl,'CHECK',1))
      #CALL(%ReplaceSubString,%TheFieldName,'&','')                     #! RA.2021.04.10: Remove the ALT-& from text.
      #!SET(%TheFieldName, 'PROMPT(' & %TheFieldName & ')')
      #SET(%TheFieldName, 'PR(' & %TheFieldName & ')')                  #! RA.2022.04.10: PROMPT -> PR
    #ENDIF
    #IF(INSTRING('PROMPT(',%FieldScreenControl,1,1) > 0)
      #SET(%TheFieldName, EXTRACT(%FieldScreenControl,'PROMPT',1))
      #CALL(%ReplaceSubString,%TheFieldName,'&','')                     #! RA.2021.04.10: Remove the ALT-& from text.
      #SET(%TheFieldName, 'PR(' & %TheFieldName & ')')                  #! RA.2022.04.10: PROMPT -> PR
    #ENDIF
  #ENDFOR
  #CALL(%ReplaceSubString,%TheFieldName,'&','')                         #! RA.2021.04.10: Remove the ALT-& from text.
  #CALL(%ReplaceSubString,%TheFieldName,'''','''''')
  #IF(%FieldType='END')
    #SET(%TheFieldName, '')
  #ENDIF
  #SET(%TheName , %TheName & '|' & %TheFieldName)
#! RA.2021.11.20.SAT: Add column header to the extended name attribute
  #!SET(%TheFieldName, 'COLUMN(''''' & %FieldHeader &  ''''')')
  #SET(%TheFieldName, 'CO(''''' & %FieldHeader &  ''''')')              #! RA.2022.04.10: COLUMN -> CO
  #IF(%FieldType='END')
    #SET(%TheFieldName, '')
  #ENDIF
  #SET(%TheName , %TheName & '|' & %TheFieldName)
#!  
  #CASE(UPPER(%FieldID))
  #OF  ('GUID')
    #SET(%TheName   , %TheName & '|Salt')
  #ENDCASE
#!
#! RA.2022.06.17.FRI: Added HASH definition for the extended name attributes
#INSERT(%GetHashOptions)                                                              #! HASH(,,,) for Fields
#IF((SUB(%NFieldOpt1,1,1) <> 'N') AND (%NFieldOpt2 <> ''))
  #SET(%TheName     , %TheName & '|Hash(' & %NFieldOpt2 & ')')
#ENDIF
#! RA.2022.06.17.FRI: Added ENCRYPTED definition for the extended name attributes
#INSERT(%GetEncryptedOptions)                                                         #! ENCRYPTED(,,,) for Fields
#IF((SUB(%NFieldOpt1,1,1) <> 'N') AND (%NFieldOpt2 <> ''))
  #SET(%TheName     , %TheName & '|Encrypted(' & %NFieldOpt2 & ')')
#ENDIF
#!
#! RA.2022.04.10: TESTING: Let me know the length and what it is being generated
#!#SET(%NextLine, '!-- LEN(%TheName) =[ ' & FORMAT(LEN(%TheName),@N04) & ' ], %TheName=[ "' & %TheName & '" ]')
#!%NextLine
#!
#! RA.2019.11.21: This contains the original name external attributes in the dictionary.
#! There might be a need to parse what currently exists there in the old external name attributes  
#! and add what does not exist into the new. Not needed at this time. But food for future thought.
#! 
  #SET(%TheFieldName, %FieldName)
#!
  #! RA.2020.02.05: Leave case intact here.
  #!SET(%TheName    , LOWER(%TheName) & '<39>)')
  #SET(%TheName     , %TheName & '<39>)')
#! [???] Add name string display for debugging
#! ---- %TheFieldName
#! ---- %TheName
#SET(%pTheName      , %TheName)
#!-----------------------------------------------------------------------------
#!-----------------------------------------------------------------------------
#GROUP(%CalculatePositionGRPREC,*%FldFrom,*%FldTo,*%FldSize,%pFieldType,%pFieldMemoSize)
#! %%FldFrom=%FldFrom, %%FldTo=%FldTo, %%FldSize=%FldSize, %%pFieldType=%pFieldType, %%pFieldMemoSize=%pFieldMemoSize 
  #SET(%FldSize, %pFieldMemoSize)
#! RA.2022.04.03: Calculations are for physical size
#! #CASE(%pFieldType)
#! #OF  ('CSTRING')
#!   #SET(%FldSize, %pFieldMemoSize - 1)
#! #ENDCASE
#IF((SUB(%pFieldType,1,1) = '&') OR (%pFieldType = 'ANY'))
  #SET(%FldSize, 4)                           #! RA.2022.05.01.SUN: It's a REFERENCE of 4 bytes
#ENDIF
#CASE(%pFieldType)
#OF  ('GROUP')
#OROF('END')
  #SET(%FldSize, 0)
  #SET(%FldFrom, %FldTo)
#ELSE
  #IF(%FldFrom = 0)
    #SET(%FldFrom, %FldFrom + 1)
    #SET(%FldTo  ,        0 + %FldSize - 0)
  #ELSE
    #SET(%FldFrom, %FldFrom + 0)
    #SET(%FldTo  , %FldFrom + %FldSize - 1)
  #ENDIF
#ENDCASE
#!-- %%FldSize = %FldSize , %%FldFrom = %FldFrom , %%FldTo = %FldTo
#!-----------------------------------------------------------------------------
#!-----------------------------------------------------------------------------
#GROUP(%BuildFldStmtGRPREC,*%zFldStmt)
#SET(%zA,INSTRING(',NAME(',%FieldStatement,1,1))
#IF (%zA)
  #SET(%zB,INSTRING(')',%FieldStatement,1,%zA))
  #SET(%zFldStmt,SUB(%FieldStatement,1,%zA-1))
  #SET(%zFldStmt,%zFldStmt & SUB(%FieldStatement,%zB+1,LEN(%FieldStatement)-%zA+1))
#!---- %%zFldStmt = %zFldStmt
#ELSE
  #SET(%zFldStmt,%FieldStatement)
#END
#!-----------------------------------------------------------------------------
#!-----------------------------------------------------------------------------
#GROUP(%GetFieldOptions)                                                        #! REFVAR(,,,) for Fields
#SET(%nLoc1,INSTRING('REFVAR(',UPPER(%FieldUserOptions),1,1))
#SET(%nLoc2,INSTRING(')',%FieldUserOptions,1,%nLoc1))
#SET(%NFieldUser,UPPER(SUB(%FieldUserOptions,%nLoc1,%nLoc2)))
#!SET(%NFieldUser,UPPER(EXTRACT(%FieldUserOptions,'REFVAR')))
#SET(%NFieldOpt1,EXTRACT(%NFieldUser,'REFVAR',1))
#SET(%NFieldOpt2,EXTRACT(%NFieldUser,'REFVAR',2))
#SET(%NFieldOpt3,EXTRACT(%NFieldUser,'REFVAR',3))
#SET(%NFieldOpt4,EXTRACT(%NFieldUser,'REFVAR',4))
#IF(%FALSE)
  #IF(%NFieldUser)
---- %%GetFieldOptions: [%FieldID] 0"%NFieldUser", 1"%NFieldOpt1", 2"%NFieldOpt2", 3"%NFieldOpt3", 4"%NFieldOpt4"
  #ENDIF
#ENDIF
#!-----------------------------------------------------------------------------
#!-----------------------------------------------------------------------------
#! RA.2022.06.17.FRI: Added HASH definition for the extended name attributes
#GROUP(%GetHashOptions)                                                         #! HASH(,,,) for Fields
#SET(%nLoc1,INSTRING('HASH(',UPPER(%FieldUserOptions),1,1))
#SET(%nLoc2,INSTRING(')',%FieldUserOptions,1,%nLoc1))
#SET(%NFieldUser,UPPER(SUB(%FieldUserOptions,%nLoc1,%nLoc2)))
#!SET(%NFieldUser,UPPER(EXTRACT(%FieldUserOptions,'HASH')))
#SET(%NFieldOpt1,EXTRACT(%NFieldUser,'HASH',1))
#SET(%NFieldOpt2,EXTRACT(%NFieldUser,'HASH',2))
#SET(%NFieldOpt3,EXTRACT(%NFieldUser,'HASH',3))
#SET(%NFieldOpt4,EXTRACT(%NFieldUser,'HASH',4))
#IF(%FALSE)
  #IF(%NFieldUser)
---- %%GetHashOptions: [%FieldID] 0"%NFieldUser", 1"%NFieldOpt1", 2"%NFieldOpt2", 3"%NFieldOpt3", 4"%NFieldOpt4"
  #ENDIF
#ENDIF
#!-----------------------------------------------------------------------------
#!-----------------------------------------------------------------------------
#! RA.2022.06.17.FRI: Added ENCRYPTED definition for the extended name attributes
#GROUP(%GetEncryptedOptions)                                                    #! ENCRYPTED(,,,) for Fields
#SET(%nLoc1,INSTRING('ENCRYPTED(',UPPER(%FieldUserOptions),1,1))
#SET(%nLoc2,INSTRING(')',%FieldUserOptions,1,%nLoc1))
#SET(%NFieldUser,UPPER(SUB(%FieldUserOptions,%nLoc1,%nLoc2)))
#!SET(%NFieldUser,UPPER(EXTRACT(%FieldUserOptions,'ENCRYPTED')))
#SET(%NFieldOpt1,EXTRACT(%NFieldUser,'ENCRYPTED',1))
#SET(%NFieldOpt2,EXTRACT(%NFieldUser,'ENCRYPTED',2))
#SET(%NFieldOpt3,EXTRACT(%NFieldUser,'ENCRYPTED',3))
#SET(%NFieldOpt4,EXTRACT(%NFieldUser,'ENCRYPTED',4))
#IF(%FALSE)
  #IF(%NFieldUser)
---- %%GetEncryptedOptions: [%FieldID] 0"%NFieldUser", 1"%NFieldOpt1", 2"%NFieldOpt2", 3"%NFieldOpt3", 4"%NFieldOpt4"
  #ENDIF
#ENDIF
#!-----------------------------------------------------------------------------
#!-----------------------------------------------------------------------------
#!-----------------------------------------------------------------------------
#!-----------------------------------------------------------------------------
